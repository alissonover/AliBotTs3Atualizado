import GerenciadorConexaoHibrida from './gerenciadorConexaoHibrida';

class DiagnosticoServerQuery {
    private gerenciadorConexao: GerenciadorConexaoHibrida;
    private serverQuery: any = null;

    constructor() {
        this.gerenciadorConexao = GerenciadorConexaoHibrida.obterInstancia();
    }

    public async executar(): Promise<void> {
        try {
            console.log('üîç DIAGN√ìSTICO DO SERVERQUERY');
            console.log('============================');
            
            // Conectar
            await this.conectar();
            
            // Executar diagn√≥sticos
            await this.verificarConfiguracoes();
            await this.listarClientes();
            await this.verificarCanais();
            await this.testarEnvioMensagem();
            
            console.log('‚úÖ Diagn√≥stico conclu√≠do!');
            
        } catch (error: any) {
            console.log('‚ùå Erro no diagn√≥stico:', error.message);
        } finally {
            await this.desconectar();
        }
    }

    private async conectar(): Promise<void> {
        console.log('üîó Conectando...');
        await this.gerenciadorConexao.resetCompleto();
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        this.serverQuery = await this.gerenciadorConexao.obterConexaoUnica();
        
        if (!this.serverQuery) {
            throw new Error('Falha ao conectar');
        }
        
        console.log('‚úÖ Conectado!');
    }

    private async verificarConfiguracoes(): Promise<void> {
        console.log('');
        console.log('üìã CONFIGURA√á√ïES DO SERVERQUERY:');
        console.log('================================');
        
        try {
            // Verificar informa√ß√µes do servidor
            const serverInfo = await this.serverQuery.serverInfo();
            console.log('üñ•Ô∏è Servidor:', serverInfo.virtualserver_name);
            console.log('üéØ Porta:', serverInfo.virtualserver_port);
            console.log('üë• Clientes online:', serverInfo.virtualserver_clientsonline);
            
            // Verificar informa√ß√µes do pr√≥prio bot
            const whoami = await this.serverQuery.whoami();
            console.log('ü§ñ Bot ID:', whoami.client_id);
            console.log('ü§ñ Bot Channel:', whoami.client_channel_id);
            console.log('ü§ñ Bot Nickname:', whoami.client_nickname);
            
            // Verificar permiss√µes
            const perms = await this.serverQuery.clientGetIds('serveradmin');
            console.log('üîë Permiss√µes serveradmin:', perms.length > 0 ? 'SIM' : 'N√ÉO');
            
        } catch (error: any) {
            console.log('‚ùå Erro ao verificar configura√ß√µes:', error.message);
        }
    }

    private async listarClientes(): Promise<void> {
        console.log('');
        console.log('üë• CLIENTES CONECTADOS:');
        console.log('======================');
        
        try {
            const clients = await this.serverQuery.clientList();
            
            clients.forEach((client: any) => {
                if (client.type === 0) { // Apenas clientes reais
                    console.log(`üë§ ${client.nickname} (ID: ${client.clid}) - Canal: ${client.cid}`);
                }
            });
            
        } catch (error: any) {
            console.log('‚ùå Erro ao listar clientes:', error.message);
        }
    }

    private async verificarCanais(): Promise<void> {
        console.log('');
        console.log('üì∫ CANAIS DO SERVIDOR:');
        console.log('=====================');
        
        try {
            const channels = await this.serverQuery.channelList();
            
            channels.forEach((channel: any) => {
                console.log(`üì∫ ${channel.channel_name} (ID: ${channel.cid})`);
            });
            
        } catch (error: any) {
            console.log('‚ùå Erro ao listar canais:', error.message);
        }
    }

    private async testarEnvioMensagem(): Promise<void> {
        console.log('');
        console.log('üí¨ TESTE DE ENVIO DE MENSAGEM:');
        console.log('==============================');
        
        try {
            // Enviar mensagem para o servidor
            await this.serverQuery.sendTextMessage(0, 3, 'ü§ñ Teste: ServerQuery funcionando!');
            console.log('‚úÖ Mensagem enviada para o servidor!');
            
            // Tentar enviar para todos os clientes online
            const clients = await this.serverQuery.clientList();
            const realClients = clients.filter((c: any) => c.type === 0);
            
            if (realClients.length > 0) {
                const firstClient = realClients[0];
                await this.serverQuery.sendTextMessage(firstClient.clid, 1, 'ü§ñ Teste privado: ServerQuery funcionando!');
                console.log(`‚úÖ Mensagem privada enviada para ${firstClient.nickname}!`);
            }
            
        } catch (error: any) {
            console.log('‚ùå Erro ao enviar mensagem:', error.message);
        }
    }

    private async desconectar(): Promise<void> {
        console.log('');
        console.log('üîå Desconectando...');
        await this.gerenciadorConexao.resetCompleto();
        console.log('‚úÖ Desconectado!');
    }
}

// Execu√ß√£o
async function executarDiagnostico() {
    const diagnostico = new DiagnosticoServerQuery();
    await diagnostico.executar();
}

// Auto-execu√ß√£o
if (require.main === module) {
    executarDiagnostico().catch((error) => {
        console.log('üí• Erro fatal:', error.message);
        process.exit(1);
    });
}

export default DiagnosticoServerQuery;